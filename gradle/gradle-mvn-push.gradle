apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
      : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                //提交到珍爱本地maven仓库：
                repository(url: "http://nexus.zhenai.com/content/repositories/android-release/") {
                    authentication(userName: "6XCT1E", password: "XldVM4G6IO")
                }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
            }
        }
    }

//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

    def plugins = project.getPlugins()
    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
      task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        exclude "**/internal/**"
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        // Append also the classpath and files for release library variants.
        // This fixes the javadoc warnings.
        // Copy pasta from https://github.com/novoda/bintray-release/pull/39/files
        def releaseVariant = project.android.libraryVariants.find { it.name.endsWith("release") }

        classpath += releaseVariant.javaCompile.classpath
        classpath += releaseVariant.javaCompile.outputs.files
      }

      task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
      }

      task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
      }

      artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
      }
    }
    else {
      task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
      }

      task javadocsJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
      }

      artifacts {
        archives sourcesJar
        archives javadocsJar
      }
    }

    if (JavaVersion.current().isJava8Compatible()) {
      allprojects {
        tasks.withType(Javadoc) {
          options.addStringOption('Xdoclint:none', '-quiet')
        }
      }
    }
}
